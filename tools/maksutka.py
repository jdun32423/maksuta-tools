import requests
from bs4 import BeautifulSoup
import re
import socket
from colorama import Fore, init
from random import choice, randint
import os
import pyfiglet
import requests
from bs4 import BeautifulSoup
import re
import socket
import requests
import re
from colorama import Fore, init
from random import choice
import random
import time
import os
from bs4 import BeautifulSoup
import pyfiglet 

init(autoreset=True)
os.system('cls' if os.name == 'nt' else 'clear')

def banner_menuu():
    return pyfiglet.figlet_format("maksutka", font="slant")

def color_transition(text, colors):
    result = ""
    color_index = 0
    for char in text:
        if char.strip():
            result += f"{colors[color_index]}{char}"
            color_index = (color_index + 1) % len(colors)
        else:
            result += char
    return result

def print_banner():
    colorssss = [Fore.RED, Fore.YELLOW, Fore.GREEN, Fore.CYAN, Fore.MAGENTA, Fore.BLUE]
    bannerrrrr = banner_menu()
    print(color_transition(bannerrrrr, colorssss))

def search_vk(name, surname):
    headers = {
        "User-Agent": "Mozilla/5.0"
    }
    query = f"{name}+{surname}+site:vk.com"
    url = f"https://www.google.com/search?q={query}"
    try:
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        links = [a['href'] for a in soup.find_all('a', href=True) if 'vk.com' in a['href']]
        if links:
            print(Fore.GREEN + "üîé –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—ñ VK:")
            for link in set(links):
                print(Fore.CYAN + link)
        else:
            print(Fore.RED + "‚ùå VK –ø—Ä–æ—Ñ—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        print(Fore.RED + f"[–ü–û–ú–ò–õ–ö–ê VK] {e}")

def generate_passport():
    names = ['Ivan', 'Oleg', 'Maksym', 'Dmytro', 'Olena', 'Natalia']
    surnames = ['Shevchenko', 'Koval', 'Bondarenko', 'Tkachenko', 'Melnyk']
    patronymics = ['Ivanovych', 'Petrovych', 'Olehovych', 'Serhiyovych', 'Andriyivna', 'Volodymyrivna']
    region = choice(['–ö–∏—ó–≤', '–õ—å–≤—ñ–≤', '–û–¥–µ—Å–∞', '–•–∞—Ä–∫—ñ–≤', '–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è'])
    full_name = f"{choice(surnames)} {choice(names)} {choice(patronymics)}"
    dob = f"{randint(1, 28):02d}.{randint(1, 12):02d}.{randint(1965, 2003)}"
    series = f"{choice(['–ê–ù', '–í–ú', '–°–ï', '–ö–í'])}"
    number = f"{randint(100000, 999999)}"
    code = f"{randint(1000, 9999)}"
    return (
        f"{Fore.CYAN}üÜî –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∞—Å–ø–æ—Ä—Ç–∞:\n"
        f"üë§ –ü–Ü–ë: {full_name}\n"
        f"üìÖ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {dob}\n"
        f"üìç –ú—ñ—Å—Ü–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {region}\n"
        f"üìÑ –°–µ—Ä—ñ—è/–ù–æ–º–µ—Ä: {series} {number}\n"
        f"üè¢ –ö–æ–¥ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É: {code}"
    )

def search_in_database(query):
    fake_db = {
        "maks": ["maks_1999", "maks_login", "maksutka1337"],
        "ivan": ["ivanov1987", "ivchik", "ivanko"],
        "natalia": ["nata_2002", "natali_star", "natkova"],
        "oleg": ["oleg228", "oleg_real", "oleg_work"]
    }
    query = query.lower()
    results = fake_db.get(query, [])
    if results:
        return f"{Fore.GREEN}‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è '{query}':\n" + "\n".join(Fore.CYAN + x for x in results)
    return f"{Fore.RED}‚ùå –ñ–æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Ç—É: {query}"

def get_ip_info(ip):
    try:
        host, aliases, addresses = socket.gethostbyaddr(ip)
        return (
            f"{Fore.GREEN}üõ∞Ô∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ IP:\n"
            f"üåê –•–æ—Å—Ç: {Fore.CYAN}{host}\n"
            f"üîÅ –ü—Å–µ–≤–¥–æ–Ω—ñ–º–∏: {', '.join(aliases) if aliases else '–ù–µ–º–∞—î'}\n"
            f"üì° –ê–¥—Ä–µ—Å–∏: {', '.join(addresses)}"
        )
    except socket.herror:
        return f"{Fore.RED}‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø–æ IP: {ip}"
    except Exception as e:
        return f"{Fore.RED}‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}"

def get_email_info(email):
    pattern = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
    if re.fullmatch(pattern, email):
        domain = email.split("@")[1]
        provider = {
            "gmail.com": "Google Mail",
            "ukr.net": "UkrNet",
            "meta.ua": "Meta.ua",
            "outlook.com": "Microsoft Outlook",
            "i.ua": "I.UA"
        }.get(domain, "–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–æ—à—Ç–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å")
        return (
            f"{Fore.GREEN}üìß Email –∫–æ—Ä–µ–∫—Ç–Ω–∏–π: {Fore.CYAN}{email}\n"
            f"üåê –î–æ–º–µ–Ω: {domain}\n"
            f"üì¨ –°–µ—Ä–≤—ñ—Å: {provider}"
        )
    return f"{Fore.RED}‚ùå Email –º–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: {email}"

def get_phone_info(phone):
    pattern = r"^\+380\d{9}$"
    operator_map = {
        "50": "Vodafone",
        "66": "Vodafone",
        "95": "Vodafone",
        "99": "Vodafone",
        "67": "Kyivstar",
        "68": "Kyivstar",
        "96": "Kyivstar",
        "97": "Kyivstar",
        "98": "Kyivstar",
        "63": "Lifecell",
        "73": "Lifecell",
        "93": "Lifecell"
    }
    if re.fullmatch(pattern, phone):
        code = phone[3:5]
        operator = operator_map.get(code, "–ù–µ–≤—ñ–¥–æ–º–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä")
        return (
            f"{Fore.GREEN}üì± –¢–µ–ª–µ—Ñ–æ–Ω –∫–æ—Ä–µ–∫—Ç–Ω–∏–π: {Fore.CYAN}{phone}\n"
            f"üì∂ –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}"
        )
    return f"{Fore.RED}‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}"

def banner_menu():
   ascii_art = print(pyfiglet.figlet_format("          maksutka"))

import phonenumbers
import hashlib
import base64
import socket
import datetime
import re
import dns.resolver
import os
import platform
from phonenumbers import geocoder, carrier, timezone

class colorssss:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def system_info():
    os_info = platform.system() + " " + platform.release()
    local_ip = socket.gethostbyname(socket.gethostname())
    launch_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return os_info, local_ip, launch_time

def analyze_number(number):
    parsed = phonenumbers.parse(number, None)
    info = {
        "is_valid": phonenumbers.is_valid_number(parsed),
        "is_possible": phonenumbers.is_possible_number(parsed),
        "region": geocoder.description_for_number(parsed, "uk"),
        "carrier": carrier.name_for_number(parsed, "uk"),
        "timezones": timezone.time_zones_for_number(parsed)
    }
    return info

def osint_links(number):
    clean_number = re.sub(r'\D', '', number)
    return {
        "Google": f"https://www.google.com/search?q={clean_number}",
        "Facebook": f"https://www.facebook.com/search/top?q={clean_number}",
        "LinkedIn": f"https://www.linkedin.com/search/results/all/?keywords={clean_number}",
        "WhoCalled": f"https://who-called.co.uk/Number/{clean_number}",
        "Spamcalls.net": f"https://spamcalls.net/en/number/{clean_number}",
        "Numinfo": f"https://numinfo.net/{clean_number}"
    }

def check_messengers(number):
    result = {}
    platforms = ["Telegram", "WhatsApp", "Viber", "Signal"]
    for platform in platforms:
        result[platform] = f"–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Ä—É—á–Ω—É –∞–±–æ API ({platform.lower()}.me/{number[-9:]})"
    return result

def digit_analysis(number):
    digits = re.sub(r'\D', '', number)
    freq = {str(i): digits.count(str(i)) for i in range(10)}
    return {
        "length": len(digits),
        "sum": sum(int(d) for d in digits),
        "frequencies": freq,
        "is_palindrome": digits == digits[::-1]
    }


def hash_data(data):
    encoded = data.encode()
    return {
        "MD5": hashlib.md5(encoded).hexdigest(),
        "SHA1": hashlib.sha1(encoded).hexdigest(),
        "SHA256": hashlib.sha256(encoded).hexdigest(),
        "BASE64": base64.b64encode(encoded).decode()
    }


def dns_lookup(domain="google.com"):
    try:
        answers = dns.resolver.resolve(domain, 'A')
        return [rdata.address for rdata in answers]
    except:
        return ["–ü–æ–º–∏–ª–∫–∞ DNS"]


def print_report(number):

    print(f"{Colors.OKCYAN}[1] –ê–Ω–∞–ª—ñ–∑ —Ñ–æ—Ä–º–∞—Ç—É, –≥–µ–æ —Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...{Colors.ENDC}")
    info = analyze_number(number)
    for k, v in info.items():
        print(f"  {k.capitalize()}: {v}")

    print(f"{Colors.OKCYAN}\n[2] OSINT –ø–æ—Å–∏–ª–∞–Ω–Ω—è:{Colors.ENDC}")
    links = osint_links(number)
    for name, url in links.items():
        print(f"  {name}: {url}")

    print(f"{Colors.OKCYAN}\n[3] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Å–µ–Ω–¥–∂–µ—Ä—ñ–≤:{Colors.ENDC}")
    messengers = check_messengers(number)
    for m, res in messengers.items():
        print(f"  {m}: {res}")

    print(f"{Colors.OKCYAN}\n[4] –¶–∏—Ñ—Ä–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:{Colors.ENDC}")
    digits = digit_analysis(number)
    for k, v in digits.items():
        print(f"  {k.capitalize()}: {v}")

    print(f"{Colors.OKCYAN}\n[5] –•–µ—à—ñ –Ω–æ–º–µ—Ä–∞:{Colors.ENDC}")
    hashes = hash_data(number)
    for algo, h in hashes.items():
        print(f"  {algo}: {h}")

    print(f"{Colors.OKCYAN}\n[6] DNS Lookup:{Colors.ENDC}")
    dns_res = dns_lookup()
    for ip in dns_res:
        print(f"  IP: {ip}")

    print(f"{Colors.OKCYAN}\n[7] –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.{Colors.ENDC}\n")


def phonenum():
    print(" by @zxc_defoltik ")
    print("\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX:")
    number = input(">>> ").strip()
    if not re.match(r'^\+380\d{9}$', number):
        print(f"{Colors.FAIL}–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!{Colors.ENDC}")
        return
    print_report(number)

def qqqqqwwwwmaksutka():
    banner_menuu()
    print("                         by @zxc_defoltik ")
    time.sleep(2)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≥–∞—Ä–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è

    while True:
        print(Fore.RED + "\n                         Choose an option:")
        print(Fore.RED + "                         1. Search VK Profile")
        print(Fore.RED + "                         2. Generate Passport")
        print(Fore.RED + "                         3. Search in Database")
        print(Fore.RED + "                         4. Get IP Info")
        print(Fore.RED + "                         5. Get Email Info")
        print(Fore.RED + "                         6. Get Phone Info")
        print(Fore.RED + "                         7. Exit")

        choice = input("> ")

        if choice == "1":
            name = input("Enter first name: ")
            surname = input("Enter last name: ")
            # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ—à—É–∫—É VK
            print(f"Searching VK profile for {name} {surname}...")
            search_vk(name, surname)
        elif choice == "2":
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∞—Å–ø–æ—Ä—Ç–∞
            print(generate_passport())
        elif choice == "3":
            # –ü–æ—à—É–∫ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            query = input("Enter query to search in database: ")
            print(search_in_database(query))
        elif choice == "4":
            ip = input("Enter IP to lookup: ")
            print(get_ip_info(ip))
        elif choice == "5":
            email = input("Enter email to validate: ")
            print(get_email_info(email))
        elif choice == "6":
            phonenum()
        elif choice == "7":
            print(Fore.RED + "Exiting...")
            break
        else:
            print(Fore.RED + "Invalid choice. Please select a valid option.")

qqqqqwwwwmaksutka()
